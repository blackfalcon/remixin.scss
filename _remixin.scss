$fontPath: nil !default;  //  font path for the font-face.
$piePath: nil !default;  //  pie path for IE8 fallbacks.

@mixin remixin($property, $value, $moz: true, $ms8: true, $ms9:true, $ms: true, $webkit: true){
  @if $property == 'animation' or
      $property == 'background-clip' or
      $property == 'background-size' or
      $property == 'border-image' or
      $property == 'border-radius' or
      $property == 'box-direction' or
      $property == 'box-shadow' or
      $property == 'box-sizing' or
      $property == 'column-count' or
      $property == 'column-gap' or
      $property == 'column-rule' or
      $property == 'font-face' or
      $property == 'hyphens' or
      $property == 'linear-gradient' or
      $property == 'opacity' or
      $property == 'perspective' or
      $property == 'radial-gradient' or
      $property == 'selection' or
      $property == 'transform' or
      $property == 'transition' or
      $property == 'user-select'{
    @if $property == 'background-clip' or $property == 'background-size' or $property == 'border-image' or $property == 'box-sixing' or $property == 'column-count' or $property == 'column-gap' or $property == 'column-rule' or $property == 'hyphens' or $property == 'perspective' or $property == 'transition'{  //  background-clip, background-size, border-image, box-sizin, column-count, column-gap, column-rule, hyphens, perspective, transition
      #{$property}: $value;
      @if $moz{
        -moz-#{$property}: $value;
      }
      @if $webkit{
        -webkit-#{$property}: $value;
      }
    } @else if $property == 'box-direction'{ //  box-direction
      display:box;
      #{$property}: $value;
      @if $moz{
        display:-moz-box;
        -moz-#{$property}: $value;
      }
      @if $webkit{
        display:-webkit-box;
        -webkit-#{$property}: $value;
      }
    } @else if $property == 'border-radius'{  //  border-radius
      #{$property}: $value;
      @if $ms{
        @if $ms8{
          @if $piePath != nil{
            behavior: url($piePath + 'PIE.htc');
          }
        }
      }
    } @else if $property == 'box-shadow'{ //  box-shadow
      #{$property}: $value;
      @if $ms{
        @if $ms8{
          @if $piePath != nil{
            behavior: url($piePath + 'PIE.htc');
          }
        }
      }
      @if $moz{
        -moz-#{$property}: $value;
      }
      @if $webkit{
        -webkit-#{$property}: $value;
      }
    } @else if $property == 'font-face'{  //  font-face
      @if $fontPath != nil{
        @if length($value) == 1{
          @font-face{
            font-family: $value;
            font-style: normal;
            font-weight: normal;
            @if $ms{
              src: url($fontPath + $value +'.eot');
            } 
            src: local('☺'), url($fontPath + $value + '.ttf') format('truetype'), url($fontPath + $value + '.woff') format('woff'), url($fontPath + $value + '.svg') format('svg');
          }
        }
        @if length($value) == 2{
          @font-face{
            font-family: nth($value, 1);
            @if type-of(nth($value, 2)) == number{
              font-weight: nth($value, 2);
            } @else if type-of(nth($value, 2)) == string{
              font-style: nth($value, 2);
            }
            @if $ms{
              src: url(nth($fontPath + $value, 1) +'.eot');
             } 
             src: local('☺'), url(nth($fontPath + $value, 1) + '.ttf') format('truetype'), url(nth($fontPath + $value, 1) + '.woff') format('woff'), url(nth($fontPath + $value, 1) + '.svg') format('svg');
          }
        } 
        @if length($value) == 3{
          @font-face{
            font-family: nth($value, 1);
            @if type-of(nth($value, 2)) == number{
              font-weight: nth($value, 2);
            } @else if type-of(nth($value, 2)) == string{
              font-style: nth($value, 2);
            }
            @if type-of(nth($value, 3)) == number{
              font-weight: nth($value, 3);
            } @else if type-of(nth($value, 3)) == string{
              font-style: nth($value, 3);
            }
            @if $ms{
              src: url(nth($fontPath + $value, 1) +'.eot');
            } 
            src: local('☺'), url(nth($fontPath + $value, 1) + '.ttf') format('truetype'), url(nth($fontPath + $value, 1) + '.woff') format('woff'), url(nth($fontPath + $value, 1) + '.svg') format('svg');
          }
        }
      }
    } @else if $property == 'linear-gradient'{  //  linear-gradient
      @if $moz{
          background-image: -moz-linear-gradient($value);
      }
      @if $ms{
        background-image: -ms-linear-gradient($value);
        @if $ms8{
          @if $piePath != nil{
            behavior: url($piePath + 'PIE.htc');
            -pie-background: linear-gradient($value);
          }
        }
      }
      @if $webkit{
          background-image: -webkit-linear-gradient($value);
      }
    } @else if $property == 'opacity'{  //  opacity
      #{$property}: $value;
      @if $ms{
        @if $ms8{
          filter: alpha(opacity=#{$value * 100});
        }
        -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opactiy=#{$value * 100})";
        zoom:1;
      }
    } @else if $property == 'radial-gradient'{  //  radial-gradient
      @if $moz{
        background-image: -moz-radial-gradient($value);
      }
      @if $ms{
        background-image: radial-gradient($value);
      }
      @if $webkit{
        background-image: -webkit-radial-gradient($value);
      }
    } @else if $property == 'selection'{  //  selection
      @if length($value) == 1{
        ::selection{
           background: nth($value, 1);
         }
         @if $moz{
           ::-moz-selection{
             background: nth($value, 1);
           }
         }
      } @else if length($value) == 2{
        ::selection{
           background: nth($value, 1);
           color: nth($value, 2);
         }
         @if $moz{
           ::-moz-selection{
             background: nth($value, 1);
             color: nth($value, 2);
           }
         }
         @if $webkit{
           ::-moz-selection{
             background: nth($value, 1);
             color: nth($value, 2);
           }
         }
      }
    } @else if $property == 'transform'{  //  transform
      #{$property}: $value;
      @if $moz{
        -moz-#{$property}: $value;
      }
      @if $ms{
        @if $ms9{
          -ms-#{$property}: $value;
        }
      }
      @if $webkit{
        -webkit-#{$property}: $value;
      }
    } @else if $property == 'animation' or $property == 'user-select'{  //  animation, user-select
      #{$property}: $value;
      @if $moz{
        -moz-#{$property}: $value;
      }
      @if $ms{
        -ms-#{$property}: $value;
      }
      @if $webkit{
        -webkit-#{$property}: $value;
      }
    }
  } @else{
    @warn "Unsupported CSS property. :(";
  }
}
